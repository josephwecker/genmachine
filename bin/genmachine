#!/usr/bin/env ruby
require 'optparse'
require 'genmachine'

BANNER = "Usage: genmachine [options] STATE_TABLE_FILES"

generators = GenMachine.generators
languages = generators.keys

options = {}
opts = OptionParser.new do |opts|
  opts.version = '0.0.1'
  opts.banner = BANNER
  opts.on('-c', '--classname NAME',
          "Class/module/function name for generated library code "+
          "(default STATE_TABLE_FILE)") do |v|
    options[:classname] = v
  end
  opts.on('-l', '--language LANGUAGE',
          "Language to generate code for- currently one of [#{languages.join(',')}] " +
          "(default #{languages.first})") do |v|
    options[:language] = v.to_underscored
  end
  opts.on('-t', '--test-with FILE',
          "Try parsing the specified file after generating the parser "+
          "(default STATE_TABLE_FILE.gmtest if it exists)") do |v|
    options[:test_file] = v
  end
  opts.on('-e', '--[no-]executable',
          "Generate an executable parser (default true)") do |v|
    options[:executable] = v
  end
  opts.on('-o', '--output-dir DIR',
          "Output directory for generated file(s) (default ./)") do |v|
    options[:output_dir] = v
  end
end

files = opts.parse(ARGV)
if files.size < 1
  $stderr.puts BANNER
  exit 1
end

file_base = files[0].chomp(File.extname(files[0]))
name_base = File.basename(file_base)
options[:executable] ||= true
options[:language]   ||= languages.first
options[:classname]  ||= name_base.capitalize + 'Parser'
options[:test_file]  ||= files[0] + '.gmtest'
options[:output_dif] ||= './'
options[:class_fname]  = options[:classname].to_underscored + '.rb'
options[:exe_fname]    = name_base.to_underscored

unless languages.include? options[:language]
  $stderr.puts "I don't know how to generate a parser in '#{options[:language]}' - try one of [#{languages.join(',')}]"
  exit 2
end

spec_parser = GenMachine::SpecParser.new(files)
options[:spec_ast] = spec_parser.build
gen = generators[options[:language]].new(options)
gen.generate_class
gen.generate_executable
gen.run_test

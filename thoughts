
Given:
  A pointer into an array
  A length of bytes available
  Flag - \0 == EOF ?
  Flag - when length is hit, EOF?
  Pointer to parsing context structure


  - 64-bit align the array
  - scan in big chunks where possible
  - when end of input is reached, if not EOF

scanning 64 bits at a time-
  - when is it possible?
  - what does the switch statement / state-machine end up looking like?
  - automatic unicode multibyte detection / scanning
    (mutate code depending on what it finds in the beginning?)

Optimized AST structure




--- eventually ---
byte-array | known+unknown length
c-string   | known+unknown length
file
stdin
pollable stream



==========================================================================
For an "everything up to [some set]" - (negative scan):
==========================================================================
(FROM http://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord )
==========================================================================

== Determine if a word has a zero byte

  // Fewer operations:
  unsigned int v; // 32-bit word to check if any 8-bit byte in it is 0
  bool hasZeroByte = ~((((v & 0x7F7F7F7F) + 0x7F7F7F7F) | v) | 0x7F7F7F7F);

The code above may be useful when doing a fast string copy in which a word is
copied at a time; it uses 5 operations. On the other hand, testing for a null
byte in the obvious ways (which follow) have at least 7 operations (when
counted in the most sparing way), and at most 12.

  // More operations:
  bool hasNoZeroByte = ((v & 0xff) && (v & 0xff00) && (v & 0xff0000) && (v & 0xff000000))
  // OR:
  unsigned char * p = (unsigned char *) &v;  
  bool hasNoZeroByte = *p && *(p + 1) && *(p + 2) && *(p + 3);

The code at the beginning of this section (labeled "Fewer operations") works by
first zeroing the high bits of the 4 bytes in the word. Subsequently, it adds a
number that will result in an overflow to the high bit of a byte if any of the
low bits were initialy set. Next the high bits of the original word are ORed
with these values; thus, the high bit of a byte is set iff any bit in the byte
was set. Finally, we determine if any of these high bits are zero by ORing with
ones everywhere except the high bits and inverting the result. Extending to 64
bits is trivial; simply increase the constants to be 0x7F7F7F7F7F7F7F7F.

For an additional improvement, a fast pretest that requires only 4 operations
may be performed to determine if the word may have a zero byte. The test also
returns true if the high byte is 0x80, so there are occasional false positives,
but the slower and more reliable version above may then be used on candidates
for an overall increase in speed with correct output.

  bool hasZeroByte = ((v + 0x7efefeff) ^ ~v) & 0x81010100;
  if (hasZeroByte) // or may just have 0x80 in the high byte
  {
    hasZeroByte = ~((((v & 0x7F7F7F7F) + 0x7F7F7F7F) | v) | 0x7F7F7F7F);
  }

There is yet a faster method — use hasless(v, 1), which is defined below; it
works in 4 operations and requires no subsquent verification. It simplifies to

  bool hasZeroByte = (v - 0x01010101UL) & ~v & 0x80808080UL;

The subexpression (v - 0x01010101UL), evaluates to a high bit set in any byte
whenever the corresponding byte in v is zero or greater than 0x80. The
sub-expression ~v & 0x80808080UL evaluates to high bits set in bytes where the
byte of v doesn't have its high bit set (so the byte was less than 0x80).
Finally, by ANDing these two sub-expressions the result is the high bits set
where the bytes in v were zero, since the high bits set due to a value greater
than 0x80 in the first sub-expression are masked off by the second.

Paul Messmer suggested the fast pretest improvement on October 2, 2004. Juha
Järvi later suggested hasless(v, 1) on April 6, 2005, which he found on Paul
Hsieh's Assembly Lab; previously it was written in a newsgroup post on April
27, 1987 by Alan Mycroft.

== Determine if a word has a byte equal to n

We may want to know if any byte in a word has a specific value. To do so, we
can XOR the value to test with a word that has been filled with the byte values
in which we're interested. Because XORing a value with itself results in a zero
byte and nonzero otherwise, we can pass the result to haszero.

#define hasvalue(x,n) \
(haszero((x) ^ (~0UL/255 * (n))))

Stephen M Bennet suggested this on December 13, 2009 after reading the entry
for haszero.

== Determine if a word has a byte less than n

Test if a word x contains an unsigned byte with value < n. Specifically for
n=1, it can be used to find a 0-byte by examining one long at a time, or any
byte by XORing x with a mask first. Uses 4 arithmetic/logical operations when n
is constant.

Requirements: x>=0; 0<=n<=128

  #define hasless(x,n) (((x)-~0UL/255*(n))&~(x)&~0UL/255*128)

To count the number of bytes in x that are less than n in 7 operations, use

  #define countless(x,n) \
  (((~0UL/255*(127+(n))-((x)&~0UL/255*127))&~(x)&~0UL/255*128)/128%255)

Juha Järvi sent this clever technique to me on April 6, 2005. The countless
macro was added by Sean Anderson on April 10, 2005, inspired by Juha's
countmore, below.

== Determine if a word has a byte greater than n

Test if a word x contains an unsigned byte with value > n. Uses 3
arithmetic/logical operations when n is constant.

Requirements: x>=0; 0<=n<=127

  #define hasmore(x,n) (((x)+~0UL/255*(127-(n))|(x))&~0UL/255*128)

To count the number of bytes in x that are more than n in 6 operations, use:

  #define countmore(x,n) \
  (((((x)&~0UL/255*127)+~0UL/255*(127-(n))|(x))&~0UL/255*128)/128%255)

The macro hasmore was suggested by Juha Järvi on April 6, 2005, and he added
countmore on April 8, 2005.

== Determine if a word has a byte between m and n

When m < n, this technique tests if a word x contains an unsigned byte value,
such that m < value < n. It uses 7 arithmetic/logical operations when n and m
are constant.

Note: Bytes that equal n can be reported by likelyhasbetween as false
positives, so this should be checked by character if a certain result is
needed.

Requirements: x>=0; 0<=m<=127; 0<=n<=128

  #define likelyhasbetween(x,m,n) \
  ((((x)-~0UL/255*(n))&~(x)&((x)&~0UL/255*127)+~0UL/255*(127-(m)))&~0UL/255*128)

This technique would be suitable for a fast pretest. A variation that takes one
more operation (8 total for constant m and n) but provides the exact answer is:

  #define hasbetween(x,m,n) \
  ((~0UL/255*(127+(n))-((x)&~0UL/255*127)&~(x)&((x)&~0UL/255*127)+~0UL/255*(127-(m)))&~0UL/255*128)

To count the number of bytes in x that are between m and n (exclusive) in 10
operations, use:

  #define countbetween(x,m,n) (hasbetween(x,m,n)/128%255)

Juha Järvi suggested likelyhasbetween on April 6, 2005. From there, Sean
Anderson created hasbetween and countbetween on April 10, 2005. 
